var searchIndex = {};
searchIndex['srecs'] = {"items":[[0,"","srecs","srecs stands for: \"Simple Rust Entity Component System\".",null,null],[3,"Entity","","Entity identifier used to acces an Entity in the world.",null,null],[12,"idx","","",0,null],[12,"uuid","","",0,null],[3,"EntityIterator","","Iterates over all valid entities in the world it was generated from.\nOnly allows immutable acces to the world because the world has been borrowed.",null,null],[0,"world","","",null,null],[3,"World","srecs::world","Keeps track of entities and their components.",null,null],[11,"new","","",1,{"inputs":[{"name":"world"}],"output":{"name":"world"}}],[11,"add_entity","","Adds a new entity.\nWill reuse an idx if available, if not it will increment the idx counter and allocate\nspace for the components.",1,{"inputs":[{"name":"world"}],"output":{"name":"entity"}}],[11,"remove_entity","","Slates an entity for removal.\nThe removal won't actually be done until `propagate_changes()` is called.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":null}],[11,"propagate_changes","","Removes all entities currently slated for removal.",1,{"inputs":[{"name":"world"}],"output":null}],[11,"is_valid_entity","","Checks if an `Entity` reference is valid.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"get_uuid","","Returns the uuid currently associated with an entity index.\nReturns 0 for nonexistent entities.",1,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"add_component","","Adds a new component to an entity.\nIf the entity already had that component, that component is returned.\nOtherwise, `None` is returned.",1,{"inputs":[{"name":"world"},{"name":"entity"},{"name":"t"}],"output":{"name":"option"}}],[11,"has_component","","Returns whether an entity has a specific component or not.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"get_component","","Returns a reference to a component, if it exists.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"option"}}],[11,"get_mut_component","","Returns a mutable reference to a component, if it exists.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"option"}}],[11,"remove_component","","Removes a component from an entity.\nReturning the component if it existed, or `None` if it didn't.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"option"}}],[11,"iterator","","Returns a lazy iterator for immutable acces to the entities.",1,{"inputs":[{"name":"world"}],"output":{"name":"entityiterator"}}],[11,"list_entities","","Returns a vector listing all the currently active entities.\nCan be used to iterate over all active entities while making changes to the world.",1,{"inputs":[{"name":"world"}],"output":{"name":"vec"}}],[11,"next","srecs","Gets the componentmap for the next valid entity.\nIs not really optimized.",2,{"inputs":[{"name":"entityiterator"}],"output":{"name":"option"}}]],"paths":[[3,"Entity"],[3,"World"],[3,"EntityIterator"]]};
searchIndex['anymap_ecs'] = {"items":[[0,"","anymap_ecs","",null,null],[3,"Entity","","Entity identifier used to acces an Entity in the world.",null,null],[12,"idx","","",0,null],[12,"uuid","","",0,null],[3,"World","","Keeps track of entities and their components.",null,null],[3,"EntityIterator","","Iterates over all valid entities in the world it was generated from.\nOnly allows immutable acces to the world because the world has been borrowed.",null,null],[11,"new","","",1,{"inputs":[{"name":"world"}],"output":{"name":"world"}}],[11,"add_entity","","Adds a new entity.\nWill reuse an idx if available, if not it will increment the idx counter and allocate\nspace for the components.",1,{"inputs":[{"name":"world"}],"output":{"name":"entity"}}],[11,"remove_entity","","Removes an entity, but only if the uuid matches.\nReturns true if the entity existed and could be deleted, otherwise false.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"is_valid_entity","","Checks if an `Entity` reference is valid.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"get_uuid","","Returns the uuid currently associated with an entity index.\nReturns 0 for nonexistent entities.",1,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"add_component","","Adds a new component to an entity.\nIf the entity already had that component, that component is returned.\nOtherwise, `None` is returned.",1,{"inputs":[{"name":"world"},{"name":"entity"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_component","","Returns a reference to a component, if it exists.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"option"}}],[11,"get_mut_component","","Returns a mutable reference to a component, if it exists.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"option"}}],[11,"iterator","","Returns a lazy iterator for immutable acces to the entities.",1,{"inputs":[{"name":"world"}],"output":{"name":"entityiterator"}}],[11,"list_entities","","Returns a vector listing all the currently active entities.\nCan be used to iterate over all active entities while making changes to the world.",1,{"inputs":[{"name":"world"}],"output":{"name":"vec"}}],[11,"next","","Gets the componentmap for the next valid entity.\nIs not really optimized.",2,{"inputs":[{"name":"entityiterator"}],"output":{"name":"option"}}]],"paths":[[3,"Entity"],[3,"World"],[3,"EntityIterator"]]};
searchIndex['property_rs'] = {"items":[[0,"","property_rs","",null,null],[3,"Entity","","Entity identifier used to acces an Entity in the world.",null,null],[12,"idx","","",0,null],[12,"uuid","","",0,null],[3,"World","","",null,null],[11,"new","","",1,{"inputs":[{"name":"world"}],"output":{"name":"world"}}],[11,"add_entity","","Adds a new entity.\nWill reuse an idx if available, if not it will increment the idx counter and allocate\nspace for the components.",1,{"inputs":[{"name":"world"}],"output":{"name":"entity"}}],[11,"remove_entity","","Removes an entity, but only if the uuid matches.\nReturns true if the entity existed and could be deleted, otherwise false.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"is_valid_entity","","Checks if an `Entity` reference is valid.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"bool"}}],[11,"add_component","","Adds a new component to an entity.\nIf the entity already had that component, that component is returned.\nOtherwise, `None` is returned.",1,{"inputs":[{"name":"world"},{"name":"entity"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_component","","Returns a reference to a component, if it exists.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"option"}}],[11,"get_mut_component","","Returns a mutable reference to a component, if it exists.",1,{"inputs":[{"name":"world"},{"name":"entity"}],"output":{"name":"option"}}]],"paths":[[3,"Entity"],[3,"World"]]};
searchIndex['anymap'] = {"items":[[0,"","anymap","This crate provides the `AnyMap` type, a safe and convenient store for one value of each type.",null,null],[3,"Map","","A collection containing zero or one values for any given type and allowing convenient,\ntype-safe access to those values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in an `Map`.",null,null],[3,"VacantEntry","","A view into a single empty location in an `Map`.",null,null],[4,"Entry","","A view into a single location in an `Map`, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry",0,null],[13,"Vacant","","A vacant Entry",0,null],[0,"any","","The different types of `Any` for use in a map.",null,null],[8,"UncheckedAnyExt","anymap::any","",null,null],[10,"downcast_ref_unchecked","","",1,{"inputs":[{"name":"uncheckedanyext"}],"output":{"name":"t"}}],[10,"downcast_mut_unchecked","","",1,{"inputs":[{"name":"uncheckedanyext"}],"output":{"name":"t"}}],[10,"downcast_unchecked","","",1,{"inputs":[{"name":"uncheckedanyext"}],"output":{"name":"box"}}],[8,"Any","","See also [`CloneAny`](trait.CloneAny.html) for a cloneable version of this trait.",null,null],[8,"CloneAny","","See also [`Any`](trait.Any.html) for a version without the `Clone` requirement.",null,null],[11,"fmt","anymap","",2,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"box"}}],[11,"fmt","","",2,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"box"}}],[11,"fmt","","",2,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"box"}}],[11,"fmt","","",2,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",2,{"inputs":[{"name":"any"}],"output":{"name":"box"}}],[11,"fmt","","",3,{"inputs":[{"name":"cloneany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"box"}}],[11,"fmt","","",3,{"inputs":[{"name":"cloneany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"box"}}],[11,"fmt","","",3,{"inputs":[{"name":"cloneany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"box"}}],[11,"fmt","","",3,{"inputs":[{"name":"cloneany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"downcast_ref_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","",3,{"inputs":[{"name":"cloneany"}],"output":{"name":"box"}}],[11,"clone","alloc::boxed","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[0,"raw","anymap","The raw form of a `Map`, allowing untyped access.",null,null],[3,"RawMap","anymap::raw","The raw, underlying form of a `Map`.",null,null],[3,"Iter","","RawMap iterator.",null,null],[3,"IterMut","","RawMap mutable iterator.",null,null],[3,"IntoIter","","RawMap move iterator.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `RawMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `RawMap`.",null,null],[4,"Entry","","A view into a single location in a `RawMap`, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry",5,null],[13,"Vacant","","A vacant Entry",5,null],[11,"fmt","","",6,{"inputs":[{"name":"rawmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"rawmap"}],"output":{"name":"rawmap"}}],[11,"default","","",6,{"inputs":[{"name":"rawmap"}],"output":{"name":"rawmap"}}],[11,"new","","Create an empty collection.",6,{"inputs":[{"name":"rawmap"}],"output":{"name":"rawmap"}}],[11,"with_capacity","","Creates an empty collection with the given initial capacity.",6,{"inputs":[{"name":"rawmap"},{"name":"usize"}],"output":{"name":"rawmap"}}],[11,"capacity","","Returns the number of elements the collection can hold without reallocating.",6,{"inputs":[{"name":"rawmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the collection. The collection may reserve more space to avoid\nfrequent reallocations.",6,{"inputs":[{"name":"rawmap"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the collection as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",6,{"inputs":[{"name":"rawmap"}],"output":null}],[11,"len","","Returns the number of items in the collection.",6,{"inputs":[{"name":"rawmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no items in the collection.",6,{"inputs":[{"name":"rawmap"}],"output":{"name":"bool"}}],[11,"clear","","Removes all items from the collection. Keeps the allocated memory for reuse.",6,{"inputs":[{"name":"rawmap"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",7,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"len","","",7,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",8,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"len","","",8,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"len","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"iter","","An iterator visiting all entries in arbitrary order.",6,{"inputs":[{"name":"rawmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all entries in arbitrary order.",6,{"inputs":[{"name":"rawmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the entry for the given type in the collection for in-place manipulation.",6,{"inputs":[{"name":"rawmap"},{"name":"typeid"}],"output":{"name":"entry"}}],[11,"get","","Returns a reference to the value corresponding to the key.",6,{"inputs":[{"name":"rawmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,{"inputs":[{"name":"rawmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,{"inputs":[{"name":"rawmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value present in the map,\nthat value is returned. Otherwise, None is returned.",6,{"inputs":[{"name":"rawmap"},{"name":"typeid"},{"name":"box"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the\nmap.",6,{"inputs":[{"name":"rawmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"index","","",6,{"inputs":[{"name":"rawmap"},{"name":"q"}],"output":{"name":"a"}}],[11,"index_mut","","",6,{"inputs":[{"name":"rawmap"},{"name":"q"}],"output":{"name":"a"}}],[11,"into_iter","","",6,{"inputs":[{"name":"rawmap"}],"output":{"name":"intoiter"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",5,{"inputs":[{"name":"entry"},{"name":"box"}],"output":{"name":"a"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"a"}}],[11,"get","","Gets a reference to the value in the entry.",10,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"a"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",10,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"a"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the collection itself.",10,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"a"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",10,{"inputs":[{"name":"occupiedentry"},{"name":"box"}],"output":{"name":"box"}}],[11,"remove","","Takes the value out of the entry, and returns it.",10,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"box"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",11,{"inputs":[{"name":"vacantentry"},{"name":"box"}],"output":{"name":"a"}}],[6,"AnyMap","anymap","The most common type of `Map`: just using `Any`.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"new","","Create an empty collection.",12,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"with_capacity","","Creates an empty collection with the given initial capacity.",12,{"inputs":[{"name":"map"},{"name":"usize"}],"output":{"name":"map"}}],[11,"capacity","","Returns the number of elements the collection can hold without reallocating.",12,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the collection. The collection may reserve more space to avoid\nfrequent reallocations.",12,{"inputs":[{"name":"map"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the collection as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",12,{"inputs":[{"name":"map"}],"output":null}],[11,"len","","Returns the number of items in the collection.",12,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no items in the collection.",12,{"inputs":[{"name":"map"}],"output":{"name":"bool"}}],[11,"clear","","Removes all items from the collection. Keeps the allocated memory for reuse.",12,{"inputs":[{"name":"map"}],"output":null}],[11,"get","","Returns a reference to the value stored in the collection for the type `T`, if it exists.",12,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value stored in the collection for the type `T`,\nif it exists.",12,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"insert","","Sets the value stored in the collection for the type `T`.\nIf the collection already had a value of type `T`, that value is returned.\nOtherwise, `None` is returned.",12,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes the `T` value from the collection,\nreturning it if there was one or `None` if there was not.",12,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"contains","","Returns true if the collection contains a value of type `T`.",12,{"inputs":[{"name":"map"}],"output":{"name":"bool"}}],[11,"entry","","Gets the entry for the given type in the collection for in-place manipulation",12,{"inputs":[{"name":"map"}],"output":{"name":"entry"}}],[11,"as_ref","","",12,{"inputs":[{"name":"map"}],"output":{"name":"rawmap"}}],[11,"as_mut","","",12,{"inputs":[{"name":"map"}],"output":{"name":"rawmap"}}],[11,"into","","",12,{"inputs":[{"name":"map"}],"output":{"name":"rawmap"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry",13,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry",13,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the collection itself",13,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",13,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",13,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",14,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}]],"paths":[[4,"Entry"],[8,"UncheckedAnyExt"],[8,"Any"],[8,"CloneAny"],[3,"Box"],[4,"Entry"],[3,"RawMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Map"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
initSearch(searchIndex);
